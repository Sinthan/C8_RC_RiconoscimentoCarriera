package model;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;


import controller.DbConnection;

/**
 * ReportDAO.
 *interacts with the database in order 
 *to manage the report data for a prefressa 
 *career recognition request
 */

public class ReportDAO implements ReportDAOInterface {

	/**
	* Insert the Report into the database.
	* @param Report
	* @return returns the int value of the state generated by the query execution.
	*/
	/*@Override
	public int insertReport(Report report) {
		if (report.getValidatedExamsList()==null) { // Checks if attributes are set
			System.out.println("Void report");
			return -2;
		}

		Connection connection = null;
		PreparedStatement preparedStatement = null;		
		int result = 0;

		String insertSQL = "INSERT INTO REPORT " +
				" (NOTE) " +
				" VALUES (?)";
		try {
			connection = DbConnection.getInstance().getConn();
			preparedStatement = connection.prepareStatement(insertSQL);			
			// Setting parameters
			preparedStatement.setString(1, report.getNote());
			// Executing the insertion
			result = preparedStatement.executeUpdate();	
			connection.commit();
			System.out.println("insertRequestRC(result=" + result + ": " + report.toString());		// Logging the operation
		} catch(SQLException e) {
			System.out.println("insertReport: error while executing the query\n" + e);
			new RuntimeException("Couldn't insert the RequestRC " + e);
		} finally {
			// Statement release
			if(preparedStatement != null)
				try {
					preparedStatement.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
		}
		return result;
	}*/

	

	/**
	* Update the Report into the database.
	* @param Report
	* @return returns the int value of the state generated by the query execution.
	*/
	/*@Override
	public int updateReport(Report report) {
		
		if(report==null) {
			
			System.out.println("Invalid report passed");
			return-1;
			
		} else if(doRetrieveReportByReportID(report.getReportID())==null) {
			
			System.out.println("report doesn't exists in DB");
			return -2;
		} else {
		
			updateNote(report.getReportID(),report.getNote());
			
			
			return 0;
		}
	}*/

	/**
	* Update the list of validated exams into the database by Report id and the new exam list.
	* @param Report
	* @param validatedExamsList is an arrayList that contains validated Report exams
	* @return returns the int value of the state generated by the query execution.
	*/
	/*@Override
	public int updateValidatedExamsList(int reportID, ArrayList<ValidatedExam> validatedExamsList) {
		// TODO Auto-generated method stub
		return 0;
	}*/
	
	/**
	* Creation of the report
	* @return returns the int value of the report id created.
	*/
	public int createReport() {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		String reportSQL = "INSERT INTO REPORT VALUES()";	
		try {
			connection = DbConnection.getInstance().getConn();
			preparedStatement = connection.prepareStatement(reportSQL);			
			// Executing the selection
			preparedStatement.executeUpdate();
			connection.commit();
			System.out.println("Report created");		// Logging the operation
		} catch(SQLException e){
			System.out.println("createReport: error while executing the query\n" + e);
			new RuntimeException(e);
		}
		return 0;
	}
	
	

	/**
	* Update the note into the database by report id and the new note.
	* @param reportID is the id of the Report.
	* @param note notes contains the annotations that the PCD has inserted regarding the Report.
	* @return returns the int value of the state generated by the query execution.
	*/
	@Override
	public int updateNote(int reportID, String note) {
		if( reportID < 0 ) {
			System.out.println(" upedateNote: invalid reportID ");
			return -1;
		} else if(doRetrieveReportByReportID(reportID)==null) {
			System.out.println("upedateNote: report doesn't exist in DB");
			return -2;
		}else {
			
			Connection connection = null;
			PreparedStatement preparedStatement = null;
			
			// Selects the exams that match the 2 given parametric values
			String updateSQL = "UPDATE REPORT SET NOTE = ?" 
					+ " WHERE ID_REPORT = ?; ";
			try { 
				
				connection = DbConnection.getInstance().getConn();
				preparedStatement = connection.prepareStatement(updateSQL);
				
				// Setting parameters
				preparedStatement.setString(1, note);
				preparedStatement.setInt(2,reportID);
				preparedStatement.executeUpdate();
				connection.commit();
				System.out.println("updateNote: report note updated");
			} catch(SQLException e) {
				System.out.println("updateNote: error while executing the query\n" + e);
				new RuntimeException("Couldn't find the report in the database " + e);
			} finally {
				// Statement release
				if(preparedStatement != null)
					try {
						preparedStatement.close();
					} catch (SQLException e) {
						e.printStackTrace();
					}
			}
			return 0;
		}
		
	}

	/**
	* get Report by report id.
	* @param reportID is the id of the Report.
	* @return returns the report that has the id equal to reportID.
	*/
	@Override
	public Report doRetrieveReportByReportID(int reportID) {
		if (reportID< 0) { // Checks if parameter is a valid ID
			System.out.println("doRetrieveReportByReportID: Please enter a valid Report ID.");
			return null;
		}

		Connection connection = null;
		PreparedStatement preparedStatement = null;
		Report report = null;
		ValidatedExamDAO vExamDAO = new ValidatedExamDAO();
		ArrayList<ValidatedExam> exams = vExamDAO.doRetrieveValidatedExamsByReportID(reportID);
		
		// Selects the report tuples that match the specified ID
		String selectSQL = "SELECT * FROM REPORT "
				+ " WHERE ID_REPORT = ?";
		try {
			connection = DbConnection.getInstance().getConn();
			preparedStatement = connection.prepareStatement(selectSQL);			
			// Setting the parameter
			preparedStatement.setInt(1, reportID);
			// Executing the selection
			ResultSet resSet = preparedStatement.executeQuery();

			// If a report is found construct it
			if (resSet.next()) {
				report = new Report();
				report.setReportID(reportID);;
				report.setNote(resSet.getString("NOTE"));
				report.setValidatedExamsList(exams);
				return report;
			}
		} catch(SQLException e) {
			System.out.println("doRetrieveReportByReportID: error while executing the query\n" + e);
			new RuntimeException("Couldn't retrieve the RequestRC " + report + e);
		} finally {
			// Statement release
			if(preparedStatement != null)
				try {
					preparedStatement.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
		}
		return null;
	}
	

	/**
	* Get the list of validated exams by Report id.
	* @param reportID is the id of the Report..
	* @return returns an set of validated exams related to the report.
	*/
	/*@Override
	public ArrayList<ValidatedExam> doRetrieveValidatedExamsByReportID(int reportID) {
		ValidatedExamDAO vDao = new ValidatedExamDAO();
		ArrayList<ValidatedExam> exams = vDao.doRetrieveValidatedExamsByReportID(reportID);
		return exams;
	}*/

	/**
	 * Deletes the <tt>Report</tt> that matches the specified ID, and the related records of the
	 * <tt>ValidatedExams</tt> objects from the database.
	 * 
	 * @param reportID	the ID of the <tt>Report</tt> object that will be deleted.
	 * @return			<ul><li>a positive count if the deletion succeeded
	 *					<li>0 if nothing was added to the database
	 *					<li>-1 if the deletion succeeded, but the database didn't return any information about the number of deleted rows
	 *					<li>-2 if the passed parameter is not a valid <tt>Report</tt> ID</ul>
	 * @author 			Gianluca Rossi
	 */
	@Override
	public int deleteReport(int reportID) {
		if (reportID < 0) { // Checks if parameter is a valid ID
			System.out.println("deleteReport: Please enter a valid report ID.");
			return -2;
		}
		
		Connection connection = null;
		PreparedStatement preparedStatement = null;		
		int result = 0;

		/* Deletes the Report related to the a RequestRC whose ID matches the given parametric value.
		 * Deletes the relative ValidatedExam records as well.
		 */
		String deleteSQL = "DELETE FROM REPORT WHERE ID_REPORT = ?";
		try {
			connection = DbConnection.getInstance().getConn();
			preparedStatement = connection.prepareStatement(deleteSQL);			
			// Setting parameter
			preparedStatement.setInt(1, reportID);
			// Executing the deletion
			result = preparedStatement.executeUpdate();	
			connection.commit();
			System.out.println("deleteReport(result=" + result + ")");		// Logging the operation
		} catch(SQLException e) {
			System.out.println("deleteReport: error while executing the query\n" + e);
			new RuntimeException("Couldn't delete the RequestRC " + e);
		} finally {
			// Statement release
			if(preparedStatement != null)
				try {
					preparedStatement.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
		}
		return result;
	}



	@Override
	public int doRetrieveLastReportID() {
		Connection connection = null;
		PreparedStatement preparedStatement = null;		
		int result = 0;

		String querySQL = "SELECT MAX(ID_REPORT) FROM REPORT";
		try {
			connection = DbConnection.getInstance().getConn();
			preparedStatement = connection.prepareStatement(querySQL);			
			// Executing the deletion
			ResultSet rs = preparedStatement.executeQuery();	
			if(rs.next()) {
				result = rs.getInt("MAX(ID_REPORT)");
			}
			connection.commit();
		} catch(SQLException e) {
			System.out.println("doRetrieveLastReportID: error while executing the query\n" + e);
			new RuntimeException("Couldn't delete the RequestRC " + e);
		} finally {
			// Statement release
			if(preparedStatement != null)
				try {
					preparedStatement.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
		}
		return result;
	}

	
}
